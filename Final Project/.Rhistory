non_smoker_table <- apply(subset(non_smoker, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(non_smoker_table)
smoker_table <- apply(subset(smoker, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(smoker_table)
clinical_cleaned$smoker <- ifelse(!is.na(clinical_cleaned$cigarettes_per_day) & clinical_cleaned$cigarettes_per_day > 0, "Yes", "No")
smoker_stats <- describe(subset(smoker, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
smoker_stats <- subset(gene_stats, select = -c(range, skew, kurtosis, se))
smoker_stats <- describe(subset(smoker, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
smoker_stats <- subset(smoker_stats, select = -c(range, skew, kurtosis, se))
png("smoker_stats.png", height = 50*nrow(smoker_stats), width = 200*ncol(smoker_stats))
grid.table(smoker_stats)
dev.off()
non_smoker_stats <- describe(subset(non_smoker, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
non_smoker_stats <- subset(non_smoker_stats, select = -c(range, skew, kurtosis, se))
png("non_smoker_stats.png", height = 50*nrow(non_smoker_stats), width = 200*ncol(non_smoker_stats))
grid.table(non_smoker_stats)
dev.off(
clinical_stats <- describe(subset(clincial_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
clinical_stats <- describe(subset(clincial_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
clinical_stats <- describe(subset(clinical_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
png("clinical_stats.png", height = 50*nrow(clinical_stats), width = 200*ncol(clinical_stats))
grid.table(clinical_stats)
dev.off()
setwd("~/GitHub/Prob-and-Stats-for-Biomed")
clinical <- read.table("clinical.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
test1 <- read.table("clinical.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
View(test1)
test2 <- read.table("exposure.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
View(test2)
data_frames <- list(test1 = test1,
test2 = test2)
replace_dash_with_NA <- function(df) {
df[df == "'--"] <- NA
df <- df[, colSums(is.na(df)) < nrow(df)]
return(df)
}
modified_data_frames <- lapply(data_frames, replace_dash_with_NA)
list2env(modified_data_frames, envir = .GlobalEnv)
View(test1)
View(test2)
# remove irrelevant rows from exposure
test2 <- subset(test2, !is.na(cigarettes_per_day))
# combine clinical and exposure based on case id
test_clean <- merge(test1, test2, by = "case_id", all.x = TRUE, all.y = TRUE)
test3 <- read.table("frequently-mutated-genes.2024-03-19.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
rm(test3)
test3 <- read.table("overall-survival-plot.2024-03-19.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
View(test3)
rm(test3)
setwd("~/GitHub/Prob-and-Stats-for-Biomed/Final Project")
rm(test1,test2)
rm(test_clean)
clinical <- read.table("Data/clinical.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
exposure <- read.table("Data/exposure.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
mutation <- read.table("Data/frequent-mutations.2024-03-18.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
genes <- read.table("Data/frequently-mutated-genes.2024-03-18.tsv", header = TRUE, sep = "\t", fill = TRUE, quote = "")
View(clinical)
# Convert empty values to NA and remove empty columns
data_frames <- list(clinical = clinical,
exposure = exposure,
mutation = mutation,
genes = genes)
replace_dash_with_NA <- function(df) {
df[df == "'--"] <- NA
df <- df[, colSums(is.na(df)) < nrow(df)]
return(df)
}
modified_data_frames <- lapply(data_frames, replace_dash_with_NA)
list2env(modified_data_frames, envir = .GlobalEnv)
# remove irrelevant rows from exposure
exposure <- subset(exposure, !is.na(cigarettes_per_day))
# combine clinical and exposure based on case id
clinical_cleaned <- merge(clinical, exposure, by = "case_id", all.x = TRUE, all.y = TRUE)
View(exposure)
## filter columns in clinical df
clinical_cleaned = subset(clinical_cleaned, select = c(case_id,
ethnicity,
gender,
race,
vital_status,
age_at_diagnosis,
days_to_death,
ajcc_pathologic_stage,
primary_diagnosis,
treatment_type,
cigarettes_per_day,
pack_years_smoked))
View(clinical_cleaned)
clinical_cleaned[c("age_at_diagnosis", "days_to_death",
"cigarettes_per_day",
"pack_years_smoked")] <- lapply(clinical_cleaned[c("age_at_diagnosis", "days_to_death",
"cigarettes_per_day",
"pack_years_smoked")], as.numeric)
## Convert to days to years
clinical_cleaned$age_at_diagnosis <- ifelse(clinical_cleaned$age_at_diagnosis > 150,
clinical_cleaned$age_at_diagnosis / 365,
round(clinical_cleaned$age_at_diagnosis, digits = 2))
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status))
## Calculate age at death
clinical_cleaned <- clinical_cleaned %>% mutate(age_at_death = age_at_diagnosis + days_to_death/365)
clinical_cleaned <- clinical_cleaned %>% relocate(age_at_death, .after = age_at_diagnosis)
# Create smoker and non smoker subsets
clinical_cleaned$smoker <- NA
clinical_cleaned$smoker <- ifelse(!is.na(clinical_cleaned$cigarettes_per_day) & clinical_cleaned$cigarettes_per_day > 0, "Yes", "No")
clinical_cleaned <- clinical_cleaned %>% relocate(smoker, .before = cigarettes_per_day)
smoker <- subset(clinical_cleaned, smoker == "Yes")
non_smoker <- subset(clinical_cleaned, smoker == "No")
## Clinical_cleaned categorical descriptive statistics
clinical_table <- apply(subset(clinical_cleaned, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(clinical_table)
smoker_table <- apply(subset(smoker, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(smoker_table)
non_smoker_table <- apply(subset(non_smoker, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(non_smoker_table)
smoker_stats <- describe(subset(smoker, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
smoker_stats <- subset(smoker_stats, select = -c(range, skew, kurtosis, se))
png("smoker_stats.png", height = 50*nrow(smoker_stats), width = 200*ncol(smoker_stats))
grid.table(smoker_stats)
dev.off()
non_smoker_stats <- describe(subset(non_smoker, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
non_smoker_stats <- subset(non_smoker_stats, select = -c(range, skew, kurtosis, se))
png("non_smoker_stats.png", height = 50*nrow(non_smoker_stats), width = 200*ncol(non_smoker_stats))
grid.table(non_smoker_stats)
dev.off()
clinical_stats <- describe(subset(clinical_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
png("clinical_stats.png", height = 50*nrow(clinical_stats), width = 200*ncol(clinical_stats))
grid.table(clinical_stats)
dev.off()
print(clinical_stats)
print(clinical_table)
clinical_table <- apply(subset(clinical_cleaned, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(clinical_table)
clinical_stats <- describe(subset(clinical_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
print(clincial_stats)
print(clinical_stats)
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status))
View(clinical_stats)
View(clinical_cleaned)
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) | vital_status == "not reported")
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status == "not reported")
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status != "not reported")
# combine clinical and exposure based on case id
clinical_cleaned <- merge(clinical, exposure, by = "case_id", all.x = TRUE, all.y = TRUE)
clinical_cleaned = subset(clinical_cleaned, select = c(case_id,
ethnicity,
gender,
race,
vital_status,
age_at_diagnosis,
days_to_death,
ajcc_pathologic_stage,
primary_diagnosis,
treatment_type,
cigarettes_per_day,
pack_years_smoked))
## Convert columns to numeric
clinical_cleaned[c("age_at_diagnosis", "days_to_death",
"cigarettes_per_day",
"pack_years_smoked")] <- lapply(clinical_cleaned[c("age_at_diagnosis", "days_to_death",
"cigarettes_per_day",
"pack_years_smoked")], as.numeric)
## Convert to days to years
clinical_cleaned$age_at_diagnosis <- ifelse(clinical_cleaned$age_at_diagnosis > 150,
clinical_cleaned$age_at_diagnosis / 365,
round(clinical_cleaned$age_at_diagnosis, digits = 2))
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status != "not reported")
View(clinical_cleaned)
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status != "Not Reported")
View(clinical_cleaned)
## Calculate age at death
clinical_cleaned <- clinical_cleaned %>% mutate(age_at_death = age_at_diagnosis + days_to_death/365)
clinical_cleaned <- clinical_cleaned %>% relocate(age_at_death, .after = age_at_diagnosis)
# Create smoker and non smoker subsets
clinical_cleaned$smoker <- NA
clinical_cleaned$smoker <- ifelse(!is.na(clinical_cleaned$cigarettes_per_day) & clinical_cleaned$cigarettes_per_day > 0, "Yes", "No")
clinical_cleaned <- clinical_cleaned %>% relocate(smoker, .before = cigarettes_per_day)
smoker <- subset(clinical_cleaned, smoker == "Yes")
non_smoker <- subset(clinical_cleaned, smoker == "No")
clinical_stats <- describe(subset(clinical_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
print(clinical_stats)
#clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
png("clinical_stats.png", height = 50*nrow(clinical_stats), width = 200*ncol(clinical_stats))
grid.table(clinical_stats)
dev.off()
clinical_table <- apply(subset(clinical_cleaned, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(clinical_table)
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status != "Not Reported" & vital_status != "unkown")
## Calculate age at death
clinical_cleaned <- clinical_cleaned %>% mutate(age_at_death = age_at_diagnosis + days_to_death/365)
clinical_cleaned <- clinical_cleaned %>% relocate(age_at_death, .after = age_at_diagnosis)
# Create smoker and non smoker subsets
clinical_cleaned$smoker <- NA
clinical_cleaned$smoker <- ifelse(!is.na(clinical_cleaned$cigarettes_per_day) & clinical_cleaned$cigarettes_per_day > 0, "Yes", "No")
clinical_cleaned <- clinical_cleaned %>% relocate(smoker, .before = cigarettes_per_day)
smoker <- subset(clinical_cleaned, smoker == "Yes")
non_smoker <- subset(clinical_cleaned, smoker == "No")
clinical_stats <- describe(subset(clinical_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
print(clinical_stats)
#clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
png("clinical_stats.png", height = 50*nrow(clinical_stats), width = 200*ncol(clinical_stats))
grid.table(clinical_stats)
dev.off()
clinical_table <- apply(subset(clinical_cleaned, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(clinical_table)
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status != "Not Reported" & vital_status != "Unkown")
## Remove rows that don't have vital_status
clinical_cleaned <- subset(clinical_cleaned, !is.na(vital_status) & vital_status != "Not Reported" & vital_status != "Unknown")
## Calculate age at death
clinical_cleaned <- clinical_cleaned %>% mutate(age_at_death = age_at_diagnosis + days_to_death/365)
clinical_cleaned <- clinical_cleaned %>% relocate(age_at_death, .after = age_at_diagnosis)
# Create smoker and non smoker subsets
clinical_cleaned$smoker <- NA
clinical_cleaned$smoker <- ifelse(!is.na(clinical_cleaned$cigarettes_per_day) & clinical_cleaned$cigarettes_per_day > 0, "Yes", "No")
clinical_cleaned <- clinical_cleaned %>% relocate(smoker, .before = cigarettes_per_day)
smoker <- subset(clinical_cleaned, smoker == "Yes")
non_smoker <- subset(clinical_cleaned, smoker == "No")
## clinical
clinical_stats <- describe(subset(clinical_cleaned, select = c(age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)))
print(clinical_stats)
#clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
png("clinical_stats.png", height = 50*nrow(clinical_stats), width = 200*ncol(clinical_stats))
grid.table(clinical_stats)
dev.off()
clinical_table <- apply(subset(clinical_cleaned, select = -c(case_id,
age_at_diagnosis,
age_at_death,
days_to_death,
cigarettes_per_day,
pack_years_smoked)),2,table)
print(clinical_table)
clinical_stats <- subset(clinical_stats, select = -c(range, skew, kurtosis, se))
png("clinical_stats.png", height = 50*nrow(clinical_stats), width = 200*ncol(clinical_stats))
grid.table(clinical_stats)
dev.off()
rm(smoker_stats,smoker_table,non_smoker_stats,non_smoker_table)
View(genes)
gene_cleaned <- subset(genes, select = -c(num_gdc_ssm_affected_cases,
num_gdc_ssm_cases,
gdc_ssm_affected_cases_percentage,
annotations))
gene_bar <- c(gene_cleaned$symbol, gene_cleaned$cohort_ssm_affected_cases_percentage)
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "% of Cases Affected",
ylab = "Gene",
col = "blue",
)
gene_bar <- setNames(gene_cleaned$cohort_ssm_affected_cases_percentage, gene_cleaned$symbol)
# Creating the bar chart
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "% of Cases Affected",
horiz = TRUE, # To make the y-axis represent genes
las = 1, # Make labels horizontal
col = "blue"
)
gene_bar <- setNames(gene_cleaned$cohort_ssm_affected_cases_percentage, gene_cleaned$symbol)
# Open a PNG device
png(file = "gene_distribution_barplot.png", width = 800, height = 600)
# Creating the bar chart
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "% of Cases Affected",
horiz = TRUE, # To make the y-axis represent genes
las = 1, # Make labels horizontal
col = "blue"
)
# Close the device to save the file
dev.off()
gene_bar <- setNames(gene_cleaned$symbol, gene_cleaned$cohort_ssm_affected_cases_percentage)
# Open a PNG device
png(file = "gene_distribution_barplot.png", width = 800, height = 600)
# Creating the bar chart
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Genes",
horiz = TRUE, # To make the y-axis represent genes
las = 1, # Make labels horizontal
col = "blue"
)
gene_bar <- setNames(gene_cleaned$cohort_ssm_affected_cases_percentage, gene_cleaned$symbol)
# Open a PNG device to save the plot
png(file = "gene_distribution_barplot.png", width = 800, height = 600)
# Creating the bar chart with genes on the x-axis and percentages on the y-axis
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "blue",
las = 2, # Makes gene names perpendicular to the axis for better readability
cex.names = 0.7 # Adjusts the size of the gene names if needed
)
# Close the device to save the file
dev.off()
## Create bar chart for gene distributions
gene_10 <- gene_cleaned[1:10,]
gene_bar <- setNames(gene_10$cohort_ssm_affected_cases_percentage, gene_10$symbol)
# Open a PNG device to save the plot
png(file = "gene_distribution_barplot.png", width = 800, height = 600)
# Creating the bar chart with genes on the x-axis and percentages on the y-axis
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "blue",
las = 2, # Makes gene names perpendicular to the axis for better readability
cex.names = 0.7 # Adjusts the size of the gene names if needed
)
# Close the device to save the file
dev.off()
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
cex.names = 0.7 # Adjusts the size of the gene names if needed
)
# Close the device to save the file
dev.off()
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
cex.names = 0.7 # Adjusts the size of the gene names if needed
)
# Close the device to save the file
dev.off()
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
cex.names = 0.7, # Adjusts the size of the gene names if needed
yaxp = c(0, max(gene_bar) + 5, 5)
)
# Close the device to save the file
dev.off()
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
#cex.names = 0.7, # Adjusts the size of the gene names if needed
yaxp = c(0, max(gene_bar) + 5, 5)
)
# Close the device to save the file
dev.off()
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
cex.names = 2, # Adjusts the size of the gene names if needed
yaxt = "n"
)
# Close the device to save the file
dev.off()
# Creating the bar chart with genes on the x-axis and percentages on the y-axis
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
)
# Close the device to save the file
dev.off()
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
)
# Manually add y-axis with more ticks
# Adjust 'by' in seq() to change the granularity of y-axis ticks
axis(side = 2, at = seq(0, max(gene_bar), by = 5), las = 1)
# Adding the value above each bar
text(x = bar_mids, y = gene_bar + 2, # Adjust the vertical position as needed
labels = round(gene_bar, 2), pos = 3, cex = 0.7)
# Creating the bar chart with genes on the x-axis and percentages on the y-axis
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
)
# Close the device to save the file
dev.off()
png(file = "gene_distribution_barplot.png", width = 800, height = 600)
# Creating the bar chart with genes on the x-axis and percentages on the y-axis
barplot(gene_bar,
main = "Distribution of Most Frequently Mutated Genes in Lung Adenocarcinomas",
xlab = "Gene",
ylab = "% of Cases Affected",
col = "seagreen",
las = 1, # Makes gene names perpendicular to the axis for better readability
)
# Close the device to save the file
dev.off()
View(gene_10)
