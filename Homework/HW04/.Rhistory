knitr::opts_chunk$set(echo = TRUE)
# Correlation matrix
correlation <- cor(expectancy)
expectancy = read.csv("Life_Expectancy_Data.csv")
setwd("~/GitHub/Prob-and-Stats-for-Biomed/Homework/HW04")
for(i in 1:ncol(expectancy)) {
expectancy[ , i][is.na(expectancy[ , i])] <- median(expectancy[ , i], na.rm=TRUE)
}
library(ggplot2)
library(readr)
library(psych)
# Descriptive statistics for features
descriptive <- describe(expectancy)
# Correlation matrix
correlation <- cor(expectancy)
View(correlation)
# Correlation matrix
correlation <- round(cor(expectancy),2)
View(correlation)
library(reshape2)
melted_cor <- melt(correlation)
ggplot(data = melted_cor, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
cormat <- round(cor(expectancy),2)
melted_cormat  <- melt(cormat)
# plot heatmap
ggplot(data = melted_cormat , aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
cormat <- round(cor(expectancy),2)
melted_cormat  <- melt(cormat)
# plot heatmap
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
View(melted_cormat)
# Calculate correlation matrix
cormat <- cor(expectancy)
# Plot heatmap of correlation matrix
ggplot(data = as.data.frame(as.table(cormat)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
coord_fixed()
# Plot heatmap of correlation matrix
ggplot(data = as.data.frame(as.table(cormat)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed()
# Plot heatmap of correlation matrix
ggplot(data = as.data.frame(as.table(cormat)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
ggplot(data = as.data.frame(as.table(cormat)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
ggplot(data = as.data.frame(as.table(cormat)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
for (var in names(expectancy)) {
histo <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(histo)
}
ggplot(data = as.data.frame(as.table(cormat)), aes(Var1, Var2, fill = Freq)) +
geom_tile(color = "white") +
geom_text(color = "black", size = 3) + # Add correlation coefficients
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
geom_text(color = "black", size = 3) + # Add correlation coefficients
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
geom_text(color = "black", size = 3) + # Add correlation coefficients
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap") +
theme(plot.title = element_text(size = 20)) + # Increase title size
theme(legend.text=element_text(size=14)) + # Increase legend text size
theme(axis.text=element_text(size=14)) + # Increase axis text size
theme(axis.title=element_text(size=16)) + # Increase axis title size
theme(legend.title=element_text(size=16)) + # Increase legend title size
labs(title = "Correlation Heatmap", x = NULL, y = NULL) +
theme(legend.position = "right") +
theme(aspect.ratio = 1) +
coord_fixed(ratio = 1)
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
rm(melted_cor)
rm(p)
rm(upper_tri)
View(cormat)
rm(histo)
# Plot heatmap of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# Plotting a histogram for each variable
for (var in names(expectancy)) {
histograms <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(histograms)
}
# Plot heatmap of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# Calculate correlation matrix
cormat <- round(cor(expectancy),2)
rm(correlation)
View(cormat)
cormat <- round(cor(expectancy),2)
# Plot heatmap of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# Plotting a histogram for each variable
for (var in names(expectancy)) {
histograms <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(histograms)
}
# Descriptive statistics for features
descriptive <- round(describe(expectancy))
View(descriptive)
# Descriptive statistics for features
descriptive <- round(describe(expectancy),5)
View(descriptive)
# Descriptive statistics for features
descriptive <- round(describe(expectancy),4)
View(descriptive)
# Descriptive statistics for features
descriptive <- round(describe(expectancy),3)
View(descriptive)
# Descriptive statistics for features
descriptive <- round(describe(expectancy),2)
View(descriptive)
# Descriptive statistics for features
descriptive <- round(describe(expectancy))
View(descriptive)
for (col in names(descriptive)) {
if (!is.factor(descriptive[[col]])) {
descriptive[[col]] <- format(descriptive[[col]], scientific = FALSE)
}
}
# Descriptive statistics for features
descriptive <- describe(expectancy)
for (col in names(descriptive)) {
if (!is.factor(descriptive[[col]])) {
descriptive[[col]] <- format(descriptive[[col]], scientific = FALSE)
}
}
View(descriptive)
# Descriptive statistics for features
descriptive <- round(describe(expectancy),2)
for (col in names(descriptive)) {
if (!is.factor(descriptive[[col]])) {
descriptive[[col]] <- format(descriptive[[col]], scientific = FALSE)
}
}
View(descriptive)
cormat <- round(cor(expectancy),2)
# Plot heatmap of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# Plot a histogram for each variable
for (var in names(expectancy)) {
histograms <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(histograms)
}
# Plot heatmap of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# Plot a histogram for each variable
for (var in names(expectancy)) {
histograms <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(histograms)
}
# Calculate correlation matrix
cormat <- round(cor(expectancy),2)
# Conditional formatting for values over 0.75
conditional_format <- function(x) {
cell_style <- ifelse(as.numeric(x) > 0.75, "background-color: #FF9999;", "")
cell_style <- paste0("style='", cell_style, "'")
return(cell_style)
}
# Print the formatted descriptive statistics with conditional formatting
print(descriptive, method = "render", html.cellfun = conditional_format)
# Plot heat map of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
melted_cormat <- melt(cormat)
# Plot heatmap of correlation matrix with correlation values
heatmap <- ggplot(data = melted_cormat, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
geom_text(aes(label = value), color = "black", size = 3) +  # Add correlation values
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
labs(title = "Correlation Heatmap") +
theme(plot.title = element_text(size = 14)) +  # Adjust title size
theme(axis.text = element_text(size = 8),       # Adjust axis text size
legend.text = element_text(size = 8)) +   # Adjust legend text size
coord_fixed()
View(heatmap)
# Plot heat map of correlation matrix
ggplot(data = melt(cormat), aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# Calculate correlation matrix
cormat <- round(cor(expectancy),3)
View(melted_cormat)
# find correlation greater than 0.75
high_cor < - melted_cormat$value > 0.75
# find correlation greater than 0.75
high_cor <- melted_cormat$value > 0.75
# find correlation greater than 0.75
high_cor <- melted_cormat[high_cor$value > 0.75, ]
# find correlation greater than 0.75
high_cor <- subset(melted_cormat, value > 0.75)
View(high_cor)
# find correlation greater than 0.75
high_cor <- subset(melted_cormat, value > 0.75 & Var1 != Var2)
View(high_cor)
# find correlation greater than 0.7
high_cor <- subset(melted_cormat, value > 0.75 & Var1 != Var2)
# find correlation greater than 0.7
high_cor <- subset(melted_cormat, value > 0.7 & Var1 != Var2)
View(high_cor)
# Calculate correlation matrix
cormat <- cor(expectancy)
melted_cormat <- melt(cormat)
# find correlation greater than 0.7
high_cor <- subset(melted_cormat, value > 0.7 & Var1 != Var2)
View(high_cor)
# find correlation greater than 0.7
high_cor <- round(subset(melted_cormat, value > 0.7 & Var1 != Var2),2)
# find correlation greater than 0.7
high_cor <- subset(round(melted_cormat,2), value > 0.7 & Var1 != Var2)
# find correlation greater than 0.7
high_cor <- subset(melted_cormat, value > 0.7 & Var1 != Var2)
View(high_cor)
# Calculate correlation matrix
cormat <- cor(expectancy)
melted_cormat <- melt(cormat)
# Plot heat map of correlation matrix
ggplot(data = melted_cormat, aes(Var1, Var2, fill = value, label = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0,
limit = c(-1, 1), space = "Lab", name = "Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 8, hjust = 1)) +
coord_fixed() +
labs(title = "Correlation Heatmap")
# find correlation greater than 0.7
high_cor <- subset(melted_cormat, value > 0.7 & Var1 != Var2)
# Plot a histogram for each variable
for (var in names(expectancy)) {
histograms <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(histograms)
}
View(high_cor)
View(descriptive)
descriptive2 <- round(summary(expectancy),2)
descriptive2 <- summary(expectancy)
View(descriptive)
View(expectancy)
ggplot(expectancy, aes(x = life_expectancy, y = infant_deaths)) +
geom_point() +
labs(x = "Life Expectancy", y = "Infant Deaths", title = "Scatterplot of Life Expectancy vs Infant Deaths") +
theme_minimal()
View(expectancy)
ggplot(expectancy, aes(x = Life.expectancy, y = infant.deaths)) +
geom_point() +
labs(x = "Life Expectancy", y = "Infant Deaths", title = "Scatterplot of Life Expectancy vs Infant Deaths") +
theme_minimal()
ggplot(expectancy, aes(x = Life.expectancy, y = infant.deaths)) +
geom_point() +
labs(x = "Life Expectancy", y = "Infant Deaths", title = "Life Expectancy vs Infant Deaths") +
theme_minimal()
ggplot(expectancy, aes(x = Life.expectancy, y = Measles)) +
geom_point() +
labs(x = "Life Expectancy", y = "Infant Deaths", title = "Life Expectancy vs Measles") +
theme_minimal()
View(descriptive)
# Feature selection
features <- subset(expectancy, select = -c(under.five.deaths, percentage.expenditure, Income.composition.of.resources))
# Model Building
model <- lm('Life.expectancy' ~ ., data = features)
# Model Building
model <- lm(Life.expectancy ~ ., data = features)
summray(model)
summary(model)
par(mfrow=c(2,2))
plot(model)
summary(model)
par(mfrow=c(2,2))
plot(model)
Use the tools described in class to generate a linear model that best fits the data. Remember that there are different ways to evaluate and compare the models and you have to make the decisions based on the data you have. You should use the metrics, scores and diagnostic plots that help evaluate the models seen in class.
