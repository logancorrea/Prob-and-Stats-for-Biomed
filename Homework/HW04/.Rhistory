setwd("~/GitHub/Prob-and-Stats-for-Biomed/Homework/HW04")
knitr::opts_chunk$set(echo = TRUE)
expectancy = read.csv("Life_Expectancy_Data.csv")
##mean imputation
for(i in 1:ncol(expectancy)) {
expectancy[ , i][is.na(expectancy[ , i])] <- median(expectancy[ , i], na.rm=TRUE)
}
head(expectancy)
summary(expectancy)
describe(expectancy)
library(tidyverse)  # For data manipulation and visualization
library(GGally)     # For pairwise plots
library(tidyverse)  # For data manipulation and visualization
head(expectancy)
describe(expectancy)
library(psych)  # For data manipulation and visualization
library(psych)  # For data manipulation and visualization
head(expectancy)
describe(expectancy)
names(expectancy) <- trimws(names(expectancy))
library(readr)
library(dplyr)
library(ggplot2)
# Get rid of white space in column names
names(expectancy) <- trimws(names(expectancy))
ggplot(data, aes(x = infant_deaths)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Log-transformed Infant Deaths")
```{r Q1}
# Get rid of white space in column names
names(expectancy) <- trimws(names(expectancy))
expectancy$infant_deaths <- log(expectancy$infant_deaths + 1)
library(ggplot2)
library(readr)
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
library(ggplot2)
library(readr)
library(tidyr)
library(dplyr)
# Clean up column names if necessary
names(expectancy) <- trimws(names(expectancy))
# Convert data to long format
data_long <- pivot_longer(expectancy, cols = everything(), names_to = "Variable", values_to = "Value")
# Plot histograms for all variables on a single plot with faceting
ggplot(data_long, aes(x = Value)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
facet_wrap(~ Variable, scales = "free") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Histograms of All Variables", x = "Value", y = "Frequency")
# Plotting a histogram for each variable
for (var in names(data)) {
p <- ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
par(mfrow = c(9, 9))
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
plot_list <- list()
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
plot_list[[var]] <- p
}
# Combine all plots (example with the first 9 plots, adjust as necessary)
plot_layout <- wrap_plots(plot_list[1:9])
library(patchwork)
install.packages("patchwork")
library(patchwork)
# Create a list to hold all ggplot objects
plot_list <- list()
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
plot_list[[var]] <- p
}
# Combine all plots (example with the first 9 plots, adjust as necessary)
plot_layout <- wrap_plots(plot_list[1:9])
# Print the combined plot
plot_layout
library(ggplot2)
library(readr)
# Assuming 'data' is your dataset loaded using read_csv or a similar function
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
library(ggplot2)
library(readr)
library(psych)
head(expectancy)
describe(expectancy)
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
View(expectancy)
descriptive <- describe(expectancy)
View(descriptive)
rm(p,lot_layout,plot_list)
rm(p,plot_layout,plot_list)
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
# Applying log transformation to a highly skewed variable as an example
expectancy$infant.deaths <- log(expectancy$infant.deaths + 1)
# Visualizing the distribution of a transformed variable
ggplot(expectancy, aes(x = infant.deaths)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Log-transformed Infant Deaths")
# Applying log transformation to a highly skewed variable as an example
expectancy$infant.deaths <- log(expectancy$infant.deaths + 1)
# Visualizing the distribution of a transformed variable
ggplot(expectancy, aes(x = infant.deaths)) +
geom_histogram(binwidth = 0.5, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Log-transformed Infant Deaths")
# Applying log transformation to a highly skewed variable as an example
expectancy$infant.deaths <- log(expectancy$infant.deaths + 1)
# Visualizing the distribution of a transformed variable
ggplot(expectancy, aes(x = infant.deaths)) +
geom_histogram(binwidth = 0.5, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Log-transformed Infant Deaths")
expectancy = read.csv("Life_Expectancy_Data.csv")
```{r impute}
##mean imputation
for(i in 1:ncol(expectancy)) {
expectancy[ , i][is.na(expectancy[ , i])] <- median(expectancy[ , i], na.rm=TRUE)
}
# Applying log transformation to a highly skewed variable as an example
expectancy$infant.deaths <- log(expectancy$infant.deaths + 1)
# Visualizing the distribution of a transformed variable
ggplot(expectancy, aes(x = infant.deaths)) +
geom_histogram(binwidth = 0.5, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle("Distribution of Log-transformed Infant Deaths")
knitr::opts_chunk$set(echo = TRUE)
expectancy = read.csv("Life_Expectancy_Data.csv")
##mean imputation
for(i in 1:ncol(expectancy)) {
expectancy[ , i][is.na(expectancy[ , i])] <- median(expectancy[ , i], na.rm=TRUE)
}
library(ggplot2)
library(readr)
library(psych)
head(expectancy)
descriptive <- describe(expectancy)
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
library(ggplot2)
library(readr)
library(psych)
descriptive <- describe(expectancy)
# Plotting a histogram for each variable
for (var in names(expectancy)) {
p <- ggplot(expectancy, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "cornflowerblue", color = "black") +
theme_minimal() +
ggtitle(paste("Distribution of", var))
print(p)
}
