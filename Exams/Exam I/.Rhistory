setwd("~/GitHub/Prob-and-Stats-for-Biomed/Exams/Exam I")
knitr::opts_chunk$set(echo = TRUE)
# set seed for reproducibility
set.seed(1)
# Define possible genders and days
genders <- c("Boy", "Girl")
days_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
# Simulate genders for two children
child_genders <- sample(genders, size = 2, replace = TRUE, prob = c(0.5, 0.5))
# Simulate birth days for two children
birth_days <- sample(days_of_week, size = 2, replace = TRUE)
# Combine the information
family_data <- data.frame(Child = 1:2, Gender = child_genders, BirthDay = birth_days)
# Print the family data
print(family_data)
# set seed for reproducibility
set.seed(1)
# Define possible genders and days
genders <- c("Boy", "Girl")
days_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
# Simulate genders for two children
child_genders <- sample(genders, size = 2, replace = TRUE, prob = c(0.5, 0.5))
# Simulate birth days for two children
birth_days <- sample(days_of_week, size = 2, replace = TRUE)
# Combine the information
family_data <- data.frame(Child = 1:2, Gender = child_genders, BirthDay = birth_days)
# Print the family data
print(family_data)
# set seed for reproducibility
set.seed(1)
# Define possible genders and days
genders <- c("Boy", "Girl")
days_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
# Simulate genders for two children
child_genders <- sample(genders, size = 2, replace = TRUE, prob = c(0.5, 0.5))
# Simulate birth days for two children
birth_days <- sample(days_of_week, size = 2, replace = TRUE)
# Combine the information
family_data <- data.frame(Child = 1:2, Gender = child_genders, BirthDay = birth_days)
# Print the family data
print(family_data)
# set seed for reproducibility
set.seed(1)
# Initialize variables
n_simulations <- 10000
two_boy <- 0
one_wednesday_boy <- 0
# Define possible outcomes for gender and days of the week
genders <- c("Boy", "Girl")
days_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
# Simulate 10,000 families
for (i in 1:n_simulations) {
# Simulate genders for two children
child_genders <- sample(genders, size = 2, replace = TRUE, prob = c(0.5, 0.5))
# Simulate birth days for two children
birth_days <- sample(days_of_week, size = 2, replace = TRUE)
# Check if at least one boy was born on a Wednesday
if ("Wednesday" %in% birth_days[child_genders == "Boy"]) {
one_wednesday_boy <- one_wednesday_boy + 1
# If there is at least one Wednesday boy, check if both are boys
if (all(child_genders == "Boy")) {
two_boy <- two_boy + 1
}
}
}
frequency <- two_boy / one_wednesday_boy
print(frequency)
cat("Frequency: ", frequency )
folder_path <- "datasaurus"
# List all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, read_csv), names_list)
library(readr)
folder_path <- "datasaurus"
# List all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, read_csv), names_list)
# Assign each data frame in the list to its own variable in the global environment
list2env(data_frames_list, envir = .GlobalEnv)
View(data_frames_list)
folder_path <- "datasaurus12"
# List all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, read_csv), names_list)
# Assign each data frame in the list to its own variable in the global environment
list2env(data_frames_list, envir = .GlobalEnv)
library(readr)
folder_path <- "datasaurus12"
# List all CSV files in the folder
csv_files <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, function(file) read_csv(file, show_col_types = FALSE)), names_list)
# Assign each data frame in the list to its own variable in the global environment
list2env(data_frames_list, envir = .GlobalEnv)
# List all CSV files in the folder
csv_files <- list.files(path = "datasaurus12", pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, function(file) read_csv(file, show_col_types = FALSE)), names_list)
# Assign each data frame in the list to its own variable in the global environment
list2env(data_frames_list, envir = .GlobalEnv)
# Set the path to the "datasaurus12" folder
folder_path <- "datasaurus12"
# Create a list where each element is a data frame from a CSV file
tbl_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE) %>%
set_names(nm = basename(.)) %>% # Optional: Set list names to file names
map(~read_csv(.))
View(data_frames_list)
rm(group1,group2,group3,group4,group5,group6,group7,group8,group9,group10,group11,group12)
# Set the path to the "datasaurus12" folder
folder_path <- "datasaurus12"
# Create a list where each element is a data frame from a CSV file
tbl_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE) %>%
set_names(nm = basename(.)) %>% # Optional: Set list names to file names
map(~read_csv(.))
library(tidyverse)
# Set the path to the "datasaurus12" folder
folder_path <- "datasaurus12"
# Create a list where each element is a data frame from a CSV file
tbl_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE) %>%
set_names(nm = basename(.)) %>% # Optional: Set list names to file names
map(~read_csv(.))
# Display the names of the elements in the list (which are the file names)
print(names(tbl_list))
View(data_frames_list)
View(data_frames_list)
rm(tbl_list)
# List all CSV files in the folder
csv_files <- list.files(path = "datasaurus12", pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, function(file) read_csv(file, show_col_types = FALSE)), names_list)
View(data_frames_list)
library(dplyr)
library(purrr)
# Function to calculate summary statistics for each data frame
calculate_summary <- function(df) {
summary <- df %>%
summarize(
x_mean = mean(x, na.rm = TRUE),
y_mean = mean(y, na.rm = TRUE),
x_sd = sd(x, na.rm = TRUE),
y_sd = sd(y, na.rm = TRUE),
pearson_correlation = cor(x, y, use = "complete.obs")
)
return(summary)
}
# Apply the function to each data frame in the list and combine the results
summary_table <- map_df(data_frames_list, calculate_summary, .id = "Dataset")
# Print the summary table
print(summary_table)
View(summary_table)
# Print the summary table
print(summary_table)
View(summary_table)
# Combine all datasets into a single data frame with an identifier for each dataset
combined_data <- map_dfr(data_frames_list, .id = "Dataset")
combined_data <- bind_rows(data_frames_list, .id = "Dataset")
# Create the facetted scatterplot
ggplot(combined_data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ Dataset, scales = "free") +
theme_minimal() +
labs(title = "Scatterplots of Datasets", x = "X", y = "Y"
View(combined_data)
View(combined_data)
# Assuming data_frames_list is your list of data frames
combined_data <- bind_rows(lapply(names(data_frames_list), function(dataset_name) {
data_frame <- data_frames_list[[dataset_name]]
data_frame$Dataset <- dataset_name
return(data_frame)
}), .id = "Dataset")
# Now, plot with the corrected approach
ggplot(combined_data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ Dataset, scales = "free") +
theme_minimal() +
labs(title = "Scatterplots of Datasets", x = "X", y = "Y")
View(combined_data)
View(data_frames_list)
combined_data_frame <- bind_rows(data_frames_list, .id = "dataset")
View(combined_data_frame)
rm(combined_data_frame)
# Part B:
# Combine data into single dataset with id as Dataset name
combined_data <- bind_rows(data_frames_list, .id = "dataset")
ggplot(combined_data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ Dataset, scales = "free") +
theme_minimal() +
labs(title = "Datasets Scatterplots", x = "X", y = "Y")
combined_data <- bind_rows(data_frames_list, .id = "dataset")
# Plot each dataset in facetted plot
ggplot(combined_data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ Dataset, scales = "free") +
theme_minimal() +
labs(title = "Datasets Scatterplots", x = "X", y = "Y")
# Combine data into single dataset with id as Dataset name
combined_data <- bind_rows(data_frames_list, .id = "dataset")
# Plot each dataset in facetted plot
ggplot(combined_data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ dataset, scales = "free") +
theme_minimal() +
labs(title = "Datasets Scatterplots", x = "X", y = "Y")
# Calculate skewness and kurtosis for each dataset
stats_summary <- map_dfr(data_frames_list, function(df, name) {
tibble(
Dataset = name,
Skewness_X = skewness(df$x),
Kurtosis_X = kurtosis(df$x),
Skewness_Y = skewness(df$y),
Kurtosis_Y = kurtosis(df$y)
)
}, .id = "Dataset")
stats_summary <- imap_dfr(data_frames_list, function(df, name) {
tibble(
Dataset = name,
Skewness_X = skewness(df$x, na.rm = TRUE),
Kurtosis_X = kurtosis(df$x, na.rm = TRUE) - 3, # Adjusting kurtosis to match excess kurtosis (subtracting 3)
Skewness_Y = skewness(df$y, na.rm = TRUE),
Kurtosis_Y = kurtosis(df$y, na.rm = TRUE) - 3  # Same adjustment for Y
)
})
library(e1071)
# Calculate skewness and kurtosis for each dataset
stats_summary <- imap_dfr(data_frames_list, function(df, name) {
tibble(
Dataset = name,
Skewness_X = skewness(df$x, na.rm = TRUE),
Kurtosis_X = kurtosis(df$x, na.rm = TRUE) - 3, # Adjusting kurtosis to match excess kurtosis (subtracting 3)
Skewness_Y = skewness(df$y, na.rm = TRUE),
Kurtosis_Y = kurtosis(df$y, na.rm = TRUE) - 3  # Same adjustment for Y
)
})
# Print the summary statistics
print(stats_summary)
View(stats_summary)
stats_summary <- imap_dfr(data_frames_list, function(df, name) {
tibble(
Dataset = name,
Skewness_X = skewness(df$x, na.rm = TRUE),
Skewness_Y = skewness(df$y, na.rm = TRUE),
)
})
# Print the summary statistics
print(stats_summary)
