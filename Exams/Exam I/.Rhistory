---
title: "Exam 1 BMI 6106"
cleveland <- read.csv("heart_cleveland_upload.csv")
Calculate the max heart rate mean
setwd("~/Documents/GitHub/Prob-and-Stats-for-Biomed/Exams/Exam I")
mean_thalach <- mean(cleveland$thalach)
cleveland <- read.csv("heart_cleveland_upload.csv")
mean_thalach <- mean(cleveland$thalach)
# Calculate the max heart rate variance
variance_thalach <- var(cleveland$thalach)
### Part B:
thalach <- cleveland$thalach
# Number of bootstrap samples
n_bootstraps <- 10000
# Initialize vectors to store the results
bootstrap_means <- numeric(n_bootstraps)
bootstrap_medians <- numeric(n_bootstraps)
bootstrap_variances <- numeric(n_bootstraps)
# Perform the bootstrap resampling
set.seed(1) # for reproducibility
for (i in 1:n_bootstraps) {
bootstrap_sample <- sample(thalach, replace = TRUE, size = length(thalach))
bootstrap_means[i] <- mean(bootstrap_sample)
bootstrap_medians[i] <- median(bootstrap_sample)
bootstrap_variances[i] <- var(bootstrap_sample)
}
### Part C:
# Calculate the mean of the bootstrap means
mean_of_means <- mean(bootstrap_means)
# Calculate the standard deviation of the bootstrap means
sd_of_means <- sd(bootstrap_means)
# Calculate the standard error of the mean
se_of_means <- sd_of_means / sqrt(length(bootstrap_means))
# Calculate the 95% confidence interval of the mean
ci_95 <- quantile(bootstrap_means, c(0.025, 0.975))
# Print the results
cat("Mean of bootstrap means:", mean_of_means, "\n")
cat("Standard deviation of bootstrap means:", sd_of_means, "\n")
cat("Standard error of bootstrap means:", se_of_means, "\n")
cat("95% CI of bootstrap means:", ci_95[1], "-", ci_95[2], "\n")
### Part D:
# Create a density plot for the bootstrap means
ggplot(data.frame(BootstrapMeans = bootstrap_means), aes(x = BootstrapMeans)) +
geom_density(fill="blue", alpha=0.5) +
labs(title="Density Plot of Bootstrap Means",
x="Mean of Bootstrap Samples",
y="Density") +
theme_minimal()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Q1
# b. Multicollinearity can lead to unstable coefficient estimates and inflated standard errors.
# Chunk 3: Q2
# c. Nominal
# Chunk 4: Q3
# c. The ratio of the odds of success to the odds of failure.
# Chunk 5: Q4
#(there are many ways to approach this question). You can create a function that simulates the families or just sample the families n number of times
### Part A:
# set seed for reproducibility
set.seed(1)
# Initialize variables
n_simulations <- 10000
two_boy <- 0
one_wednesday_boy <- 0
# Define possible outcomes for gender and days of the week
genders <- c("Boy", "Girl")
days_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
# Simulate 10,000 families
for (i in 1:n_simulations) {
# Simulate genders for two children
child_genders <- sample(genders, size = 2, replace = TRUE, prob = c(0.5, 0.5))
# Simulate birth days for two children
birth_days <- sample(days_of_week, size = 2, replace = TRUE)
# Check if at least one boy was born on a Wednesday
if ("Wednesday" %in% birth_days[child_genders == "Boy"]) {
one_wednesday_boy <- one_wednesday_boy + 1
# If there is at least one Wednesday boy, check if both are boys
if (all(child_genders == "Boy")) {
two_boy <- two_boy + 1
}
}
}
# calculate frequency of two-boy families among those that have at least one boy on Wednesday
frequency <- two_boy / one_wednesday_boy
cat("Frequency: ", frequency )
### Part B:
# In this approach, I generated 2 child genders with 50/50 probability and a birth day with equal probabilities. Then I checked if one of the children was a boy born on a Wednesday, and if true, I added +1 to the one_wednesday_boy count. Then if there was one boy born on Wednesday I checked if both children were boys and if true I added +1 to the two_boy count. I ran this simulation 10000 times and calculated the frequency of two-boy families among those that have at least one boy on Wednesday. The resulting frequency was 0.48, which is what we expected to see.
# Chunk 6: Q5
library(readr)
library(dplyr)
library(purrr)
# List all CSV files in the folder
csv_files <- list.files(path = "datasaurus12", pattern = "\\.csv$", full.names = TRUE)
# Create a named list where each name is the file name without the extension
names_list <- tools::file_path_sans_ext(basename(csv_files))
# Read each CSV file into its own data frame within a named list
data_frames_list <- setNames(lapply(csv_files, function(file) read_csv(file, show_col_types = FALSE)), names_list)
### Part A:
# Function to calculate summary statistics for each data frame
calculate_summary <- function(df) {
summary <- df %>%
summarize(
x_mean = mean(x, na.rm = TRUE),
y_mean = mean(y, na.rm = TRUE),
x_sd = sd(x, na.rm = TRUE),
y_sd = sd(y, na.rm = TRUE),
pearson_correlation = cor(x, y, use = "complete.obs")
)
return(summary)
}
# Apply the function to each data frame in the list and combine the results
summary_table <- map_df(data_frames_list, calculate_summary, .id = "Dataset")
# Print the summary table
print(summary_table)
### Part B:
# Combine data into single dataset with id as dataset name
combined_data <- bind_rows(data_frames_list, .id = "dataset")
# Plot each dataset in faceted plot
ggplot(combined_data, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~ dataset, scales = "free") +
theme_minimal() +
labs(title = "Datasets Scatterplots", x = "X", y = "Y")
mean_thalach <- mean(cleveland$thalach)
# Calculate the max heart rate variance
variance_thalach <- var(cleveland$thalach)
### Part B:
thalach <- cleveland$thalach
# Number of bootstrap samples
n_bootstraps <- 10000
# Initialize vectors to store the results
bootstrap_means <- numeric(n_bootstraps)
bootstrap_medians <- numeric(n_bootstraps)
bootstrap_variances <- numeric(n_bootstraps)
# Perform the bootstrap resampling
set.seed(1) # for reproducibility
for (i in 1:n_bootstraps) {
bootstrap_sample <- sample(thalach, replace = TRUE, size = length(thalach))
bootstrap_means[i] <- mean(bootstrap_sample)
bootstrap_medians[i] <- median(bootstrap_sample)
bootstrap_variances[i] <- var(bootstrap_sample)
}
### Part C:
# Calculate the mean of the bootstrap means
mean_of_means <- mean(bootstrap_means)
# Calculate the standard deviation of the bootstrap means
sd_of_means <- sd(bootstrap_means)
# Calculate the standard error of the mean
se_of_means <- sd_of_means / sqrt(length(bootstrap_means))
# Calculate the 95% confidence interval of the mean
ci_95 <- quantile(bootstrap_means, c(0.025, 0.975))
# Print the results
cat("Mean of bootstrap means:", mean_of_means, "\n")
cat("Standard deviation of bootstrap means:", sd_of_means, "\n")
cat("Standard error of bootstrap means:", se_of_means, "\n")
cat("95% CI of bootstrap means:", ci_95[1], "-", ci_95[2], "\n")
### Part D:
# Create a density plot for the bootstrap means
ggplot(data.frame(BootstrapMeans = bootstrap_means), aes(x = BootstrapMeans)) +
geom_density(fill="blue", alpha=0.5) +
labs(title="Density Plot of Bootstrap Means",
x="Mean of Bootstrap Samples",
y="Density") +
theme_minimal()
library(ggplot2)
mean_thalach <- mean(cleveland$thalach)
# Calculate the max heart rate variance
variance_thalach <- var(cleveland$thalach)
### Part B:
thalach <- cleveland$thalach
# Number of bootstrap samples
n_bootstraps <- 10000
# Initialize vectors to store the results
bootstrap_means <- numeric(n_bootstraps)
bootstrap_medians <- numeric(n_bootstraps)
bootstrap_variances <- numeric(n_bootstraps)
# Perform the bootstrap resampling
set.seed(1) # for reproducibility
for (i in 1:n_bootstraps) {
bootstrap_sample <- sample(thalach, replace = TRUE, size = length(thalach))
bootstrap_means[i] <- mean(bootstrap_sample)
bootstrap_medians[i] <- median(bootstrap_sample)
bootstrap_variances[i] <- var(bootstrap_sample)
}
### Part C:
# Calculate the mean of the bootstrap means
mean_of_means <- mean(bootstrap_means)
# Calculate the standard deviation of the bootstrap means
sd_of_means <- sd(bootstrap_means)
# Calculate the standard error of the mean
se_of_means <- sd_of_means / sqrt(length(bootstrap_means))
# Calculate the 95% confidence interval of the mean
ci_95 <- quantile(bootstrap_means, c(0.025, 0.975))
# Print the results
cat("Mean of bootstrap means:", mean_of_means, "\n")
cat("Standard deviation of bootstrap means:", sd_of_means, "\n")
cat("Standard error of bootstrap means:", se_of_means, "\n")
cat("95% CI of bootstrap means:", ci_95[1], "-", ci_95[2], "\n")
### Part D:
# Create a density plot for the bootstrap means
ggplot(data.frame(BootstrapMeans = bootstrap_means), aes(x = BootstrapMeans)) +
geom_density(fill="blue", alpha=0.5) +
labs(title="Density Plot of Bootstrap Means",
x="Mean of Bootstrap Samples",
y="Density") +
theme_minimal()
